/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { DragEventType } from '../interfaces/drag-event.interface';
import * as i0 from "@angular/core";
import * as i1 from "./drag-and-drop-event-bus.service";
export class DragEventListenerService {
    constructor(ngZone, renderer, eventBus) {
        this.ngZone = ngZone;
        this.renderer = renderer;
        this.eventBus = eventBus;
        // contains listeners for the starting events such as mousedown and touchstart
        this.listeners = [];
        this.dragStart = new Subject();
        this.dragMove = new Subject();
        this.dragEnd = new Subject();
        this.hasDragStarted = false;
        this.dragStartDelay = 0;
    }
    get dragStarted() {
        return this.dragStart.asObservable();
    }
    get dragMoved() {
        return this.dragMove.asObservable();
    }
    get dragEnded() {
        return this.dragEnd.asObservable();
    }
    get dragStartPosition() {
        return this.initialPosition;
    }
    attachDragListeners(draggableEl) {
        this.draggableEl = draggableEl;
        this.listeners.push(this.customDragEvent(this.draggableEl, 'mousedown', 'mousemove', 'mouseup'));
        this.listeners.push(this.customDragEvent(this.draggableEl, 'touchstart', 'touchmove', 'touchend'));
    }
    detachDragListeners() {
        if (this.listeners) {
            this.listeners.map(event => event());
        }
        // In most cases, once users start dragging with mousedown/touchstart events,
        // they will end dragging at one point with mouseup/touchend.
        // However, there might be a few cases where mousedown/touchstart events get registered,
        // but the draggable element gets removed before user ends dragging.
        // In that case, we need to remove the attached listeners that happened during the mousedown/touchstart events.
        if (this.nestedListeners) {
            this.nestedListeners.map(event => event());
        }
        if (this.checkDragStartBoundaryListener) {
            this.checkDragStartBoundaryListener();
        }
    }
    getNativeEventObject(event) {
        if (Object.prototype.hasOwnProperty.call(event, 'changedTouches')) {
            return event.changedTouches[0];
        }
        else {
            return event;
        }
    }
    customDragEvent(element, startOnEvent, moveOnEvent, endOnEvent) {
        return this.renderer.listen(element, startOnEvent, (startEvent) => {
            // save the initial point to initialPosition
            // this will be used to calculate how far the draggable has been dragged from its initial position
            this.initialPosition = {
                pageX: this.getNativeEventObject(startEvent).pageX,
                pageY: this.getNativeEventObject(startEvent).pageY,
            };
            // Initialize nested listeners' property with a new empty array;
            this.nestedListeners = [];
            // Listen to selectstart/mousemove/touchmove events outside of angular zone.
            this.ngZone.runOutsideAngular(() => {
                // This is needed to disable selection during dragging (especially in EDGE/IE11).
                this.nestedListeners.push(this.renderer.listen('document', 'selectstart', (selectEvent) => {
                    selectEvent.preventDefault();
                    selectEvent.stopImmediatePropagation();
                }));
                // During the drag start delay, pointer should stay within the boundary.
                this.checkDragStartBoundary(moveOnEvent);
                this.dragStartDelayTimeout = setTimeout(() => {
                    if (this.checkDragStartBoundaryListener) {
                        this.checkDragStartBoundaryListener();
                    }
                    this.hasDragStarted = true;
                    // Fire "dragstart"
                    this.broadcast(startEvent, DragEventType.DRAG_START);
                    this.nestedListeners.push(this.renderer.listen('document', moveOnEvent, (moveEvent) => {
                        // Event.stopImmediatePropagation() is needed here to prevent nested draggables from getting dragged
                        // altogether. We shouldn't use Event.stopPropagation() here as we are listening to the events
                        // on the global element level.
                        // With Event.stopImmediatePropagation(), it registers the events sent from the inner most draggable
                        // first. Then immediately after that, it stops listening to the same type of events on the same
                        // element. So this will help us to not register the same events that would come from the parent
                        // level draggables eventually.
                        moveEvent.stopImmediatePropagation();
                        if (this.hasDragStarted) {
                            // Fire "dragmove"
                            this.broadcast(moveEvent, DragEventType.DRAG_MOVE);
                        }
                    }));
                }, this.dragStartDelay);
            });
            // Listen to mouseup/touchend events.
            this.nestedListeners.push(this.renderer.listen('document', endOnEvent, (endEvent) => {
                if (this.hasDragStarted) {
                    // Fire "dragend" only if dragstart is registered
                    this.hasDragStarted = false;
                    this.broadcast(endEvent, DragEventType.DRAG_END);
                }
                clearTimeout(this.dragStartDelayTimeout);
                // We must remove the the nested listeners every time drag completes.
                this.nestedListeners.map(event => event());
                // We must remove the event listener from checkDragStartBoundary
                if (this.checkDragStartBoundaryListener) {
                    this.checkDragStartBoundaryListener();
                }
            }));
        });
    }
    checkDragStartBoundary(eventType) {
        this.checkDragStartBoundaryListener = this.renderer.listen('document', eventType, (moveEvent) => {
            const deltaX = Math.abs(this.getNativeEventObject(moveEvent).pageX - this.initialPosition.pageX);
            const deltaY = Math.abs(this.getNativeEventObject(moveEvent).pageY - this.initialPosition.pageY);
            // If pointer move delta exceeds horizontal or vertical threshold,
            // we should cancel drag initiation.
            if (deltaX > 1 || deltaY > 1) {
                clearTimeout(this.dragStartDelayTimeout);
                if (this.checkDragStartBoundaryListener) {
                    this.checkDragStartBoundaryListener();
                }
            }
        });
    }
    broadcast(event, eventType) {
        const dragEvent = this.generateDragEvent(event, eventType);
        switch (dragEvent.type) {
            case DragEventType.DRAG_START:
                this.dragStart.next(dragEvent);
                break;
            case DragEventType.DRAG_MOVE:
                this.dragMove.next(dragEvent);
                break;
            case DragEventType.DRAG_END:
                this.dragEnd.next(dragEvent);
                break;
            default:
                break;
        }
        // The following properties are set after they are broadcasted to the DraggableGhost component.
        dragEvent.ghostElement = this.ghostElement;
        dragEvent.dropPointPosition = this.dropPointPosition;
        this.eventBus.broadcast(dragEvent);
    }
    generateDragEvent(event, eventType) {
        const nativeEvent = this.getNativeEventObject(event);
        return {
            type: eventType,
            dragPosition: {
                pageX: nativeEvent.pageX,
                pageY: nativeEvent.pageY,
                moveX: nativeEvent.pageX - this.initialPosition.pageX,
                moveY: nativeEvent.pageY - this.initialPosition.pageY,
            },
            group: this.group,
            dragDataTransfer: this.dragDataTransfer,
            ghostElement: this.ghostElement,
        };
    }
}
DragEventListenerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DragEventListenerService, deps: [{ token: i0.NgZone }, { token: i0.Renderer2 }, { token: i1.DragAndDropEventBusService }], target: i0.ɵɵFactoryTarget.Injectable });
DragEventListenerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DragEventListenerService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: DragEventListenerService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.Renderer2 }, { type: i1.DragAndDropEventBusService }]; } });
//# sourceMappingURL=data:application/json;base64,