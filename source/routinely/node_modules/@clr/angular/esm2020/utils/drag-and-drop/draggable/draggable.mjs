/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ContentChild, Directive, EventEmitter, Output, } from '@angular/core';
import { Input } from '@angular/core';
import { DomAdapter } from '../../dom-adapter/dom-adapter';
import { ClrDragEvent } from '../drag-event';
import { ClrDraggableGhost } from '../draggable-ghost';
import { ClrIfDragged } from '../if-dragged';
import { DragEventListenerService } from '../providers/drag-event-listener.service';
import { DragHandleRegistrarService } from '../providers/drag-handle-registrar.service';
import { DraggableSnapshotService } from '../providers/draggable-snapshot.service';
import { GlobalDragModeService } from '../providers/global-drag-mode.service';
import * as i0 from "@angular/core";
import * as i1 from "../providers/drag-event-listener.service";
import * as i2 from "../providers/drag-handle-registrar.service";
import * as i3 from "../providers/draggable-snapshot.service";
import * as i4 from "../providers/global-drag-mode.service";
export class ClrDraggable {
    constructor(el, dragEventListener, dragHandleRegistrar, viewContainerRef, cfr, injector, draggableSnapshot, globalDragMode) {
        this.el = el;
        this.dragEventListener = dragEventListener;
        this.dragHandleRegistrar = dragHandleRegistrar;
        this.viewContainerRef = viewContainerRef;
        this.cfr = cfr;
        this.injector = injector;
        this.draggableSnapshot = draggableSnapshot;
        this.globalDragMode = globalDragMode;
        this.subscriptions = [];
        this.dragOn = false;
        this.dragStartEmitter = new EventEmitter();
        this.dragMoveEmitter = new EventEmitter();
        this.dragEndEmitter = new EventEmitter();
        this.draggableEl = this.el.nativeElement;
        this.componentFactory = this.cfr.resolveComponentFactory(ClrDraggableGhost);
    }
    set dataTransfer(value) {
        this.dragEventListener.dragDataTransfer = value;
    }
    set group(value) {
        this.dragEventListener.group = value;
    }
    set dragStartDelay(value) {
        if (typeof value === 'number') {
            this.dragEventListener.dragStartDelay = value;
        }
        else if (typeof value === 'string') {
            this.dragEventListener.dragStartDelay = parseInt(value, 10) || 0;
        }
    }
    createDefaultGhost(event) {
        this.draggableSnapshot.capture(this.draggableEl, event);
        // NOTE: The default ghost element will appear
        // next to the clrDraggable in the DOM as a sibling element.
        this.viewContainerRef.createComponent(this.componentFactory, 0, this.injector, [
            [this.draggableEl.cloneNode(true)],
        ]);
    }
    destroyDefaultGhost() {
        this.viewContainerRef.clear();
        this.draggableSnapshot.discard();
    }
    ngAfterContentInit() {
        this.dragHandleRegistrar.defaultHandleEl = this.draggableEl;
        this.subscriptions.push(this.dragEventListener.dragStarted.subscribe((event) => {
            this.globalDragMode.enter();
            this.dragOn = true;
            if (!this.customGhost) {
                this.createDefaultGhost(event);
            }
            this.dragStartEmitter.emit(new ClrDragEvent(event));
        }));
        this.subscriptions.push(this.dragEventListener.dragMoved.subscribe((event) => {
            this.dragMoveEmitter.emit(new ClrDragEvent(event));
        }));
        this.subscriptions.push(this.dragEventListener.dragEnded.subscribe((event) => {
            this.globalDragMode.exit();
            this.dragOn = false;
            if (!this.customGhost) {
                this.destroyDefaultGhost();
            }
            this.dragEndEmitter.emit(new ClrDragEvent(event));
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach((sub) => sub.unsubscribe());
        this.dragEventListener.detachDragListeners();
    }
}
ClrDraggable.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ClrDraggable, deps: [{ token: i0.ElementRef }, { token: i1.DragEventListenerService }, { token: i2.DragHandleRegistrarService }, { token: i0.ViewContainerRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i3.DraggableSnapshotService }, { token: i4.GlobalDragModeService }], target: i0.ɵɵFactoryTarget.Directive });
ClrDraggable.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.3.11", type: ClrDraggable, selector: "[clrDraggable]", inputs: { dataTransfer: ["clrDraggable", "dataTransfer"], group: ["clrGroup", "group"], dragStartDelay: ["clrDragStartDelay", "dragStartDelay"] }, outputs: { dragStartEmitter: "clrDragStart", dragMoveEmitter: "clrDragMove", dragEndEmitter: "clrDragEnd" }, host: { properties: { "class.draggable": "true", "class.being-dragged": "dragOn" } }, providers: [
        DragEventListenerService,
        DragHandleRegistrarService,
        DraggableSnapshotService,
        GlobalDragModeService,
        DomAdapter,
    ], queries: [{ propertyName: "customGhost", first: true, predicate: ClrIfDragged, descendants: true }], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.11", ngImport: i0, type: ClrDraggable, decorators: [{
            type: Directive,
            args: [{
                    selector: '[clrDraggable]',
                    providers: [
                        DragEventListenerService,
                        DragHandleRegistrarService,
                        DraggableSnapshotService,
                        GlobalDragModeService,
                        DomAdapter,
                    ],
                    host: { '[class.draggable]': 'true', '[class.being-dragged]': 'dragOn' },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.DragEventListenerService }, { type: i2.DragHandleRegistrarService }, { type: i0.ViewContainerRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i3.DraggableSnapshotService }, { type: i4.GlobalDragModeService }]; }, propDecorators: { customGhost: [{
                type: ContentChild,
                args: [ClrIfDragged]
            }], dataTransfer: [{
                type: Input,
                args: ['clrDraggable']
            }], group: [{
                type: Input,
                args: ['clrGroup']
            }], dragStartDelay: [{
                type: Input,
                args: ['clrDragStartDelay']
            }], dragStartEmitter: [{
                type: Output,
                args: ['clrDragStart']
            }], dragMoveEmitter: [{
                type: Output,
                args: ['clrDragMove']
            }], dragEndEmitter: [{
                type: Output,
                args: ['clrDragEnd']
            }] } });
//# sourceMappingURL=data:application/json;base64,