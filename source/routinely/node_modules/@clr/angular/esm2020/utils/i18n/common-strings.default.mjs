/*
 * Copyright (c) 2016-2023 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
export const commonStringsDefault = {
    open: 'Open',
    close: 'Close',
    show: 'Show',
    hide: 'Hide',
    expand: 'Expand',
    collapse: 'Collapse',
    more: 'More',
    select: 'Select',
    selectAll: 'Select All',
    previous: 'Previous',
    next: 'Next',
    current: 'Jump to current',
    info: 'Info',
    success: 'Success',
    warning: 'Warning',
    danger: 'Error',
    rowActions: 'Available actions',
    pickColumns: 'Manage Columns',
    showColumns: 'Show Columns',
    sortColumn: 'Sort Column',
    firstPage: 'First Page',
    lastPage: 'Last Page',
    nextPage: 'Next Page',
    previousPage: 'Previous Page',
    currentPage: 'Current Page',
    totalPages: 'Total Pages',
    filterItems: 'Filter items',
    minValue: 'Min value',
    maxValue: 'Max value',
    modalContentStart: 'Beginning of Modal Content',
    modalContentEnd: 'End of Modal Content',
    showColumnsMenuDescription: 'Show or hide columns menu',
    allColumnsSelected: 'All columns selected',
    signpostToggle: 'Signpost Toggle',
    signpostClose: 'Signpost Close',
    loading: 'Loading',
    // Datagrid
    detailPaneStart: 'Start of row details',
    detailPaneEnd: 'End of row details',
    singleSelectionAriaLabel: 'Single selection header',
    singleActionableAriaLabel: 'Single actionable header',
    detailExpandableAriaLabel: 'Toggle more row content',
    datagridFilterAriaLabel: 'Toggle {COLUMN} filter',
    datagridFilterDialogAriaLabel: 'Filter dialog',
    columnSeparatorAriaLabel: 'Column resize handle',
    columnSeparatorDescription: 'Use left or right key to resize the column',
    // Alert
    alertCloseButtonAriaLabel: 'Close alert',
    // Date Picker
    datepickerDialogLabel: 'Choose date',
    datepickerToggle: 'Toggle datepicker',
    datepickerToggleChooseDateLabel: 'Choose date',
    datepickerToggleChangeDateLabel: 'Change date, {SELECTED_DATE}',
    datepickerPreviousMonth: 'Previous month',
    datepickerCurrentMonth: 'Current month',
    datepickerNextMonth: 'Next month',
    datepickerPreviousDecade: 'Previous decade',
    datepickerNextDecade: 'Next decade',
    datepickerCurrentDecade: 'Current decade',
    datepickerSelectMonthText: 'Select month, the current month is {CALENDAR_MONTH}',
    datepickerSelectYearText: 'Select year, the current year is {CALENDAR_YEAR}',
    datepickerSelectedLabel: '{FULL_DATE} - Selected',
    // Stack View
    stackViewChanged: 'Value changed.',
    // Responsive Nav
    responsiveNavToggleOpen: 'Navigation menu',
    responsiveNavToggleClose: 'Navigation menu',
    responsiveNavOverflowOpen: 'Navigation overflow menu',
    responsiveNavOverflowClose: 'Navigation overflow menu',
    //Vertical Nav
    verticalNavGroupToggle: 'Toggle vertical navigation group',
    verticalNavToggle: 'Toggle vertical navigation',
    // Timeline steps
    timelineStepNotStarted: 'Not started',
    timelineStepCurrent: 'Current',
    timelineStepSuccess: 'Completed',
    timelineStepError: 'Error',
    timelineStepProcessing: 'In progress',
    // Combobox
    comboboxDelete: 'Delete selected option',
    comboboxSearching: 'Searching for matches for "{INPUT}"',
    comboboxSelection: 'Selection',
    comboboxSelected: 'Selected',
    comboboxNoResults: 'No results',
    comboboxOpen: 'Show options',
    // Datagrid expandable rows
    datagridExpandableBeginningOf: 'Beginning of',
    datagridExpandableEndOf: 'End of',
    datagridExpandableRowContent: 'Expandable row content',
    datagridExpandableRowsHelperText: `Screen reader table commands may not work for viewing expanded content, please use your screen reader's browse mode to read the content exposed by this button`,
    // Wizard
    wizardStepSuccess: 'Completed',
    wizardStepError: 'Error',
    /**
     * Password Input
     * Screen-reader text for the hide/show password field button
     */
    passwordHide: 'Hide password',
    passwordShow: 'Show password',
    /**
     * Datagrid footer; sr-only text after the number of selected rows.
     */
    selectedRows: 'Selected rows',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLXN0cmluZ3MuZGVmYXVsdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXIvc3JjL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3MuZGVmYXVsdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7OztHQUlHO0FBSUgsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQXFCO0lBQ3BELElBQUksRUFBRSxNQUFNO0lBQ1osS0FBSyxFQUFFLE9BQU87SUFDZCxJQUFJLEVBQUUsTUFBTTtJQUNaLElBQUksRUFBRSxNQUFNO0lBQ1osTUFBTSxFQUFFLFFBQVE7SUFDaEIsUUFBUSxFQUFFLFVBQVU7SUFDcEIsSUFBSSxFQUFFLE1BQU07SUFDWixNQUFNLEVBQUUsUUFBUTtJQUNoQixTQUFTLEVBQUUsWUFBWTtJQUN2QixRQUFRLEVBQUUsVUFBVTtJQUNwQixJQUFJLEVBQUUsTUFBTTtJQUNaLE9BQU8sRUFBRSxpQkFBaUI7SUFDMUIsSUFBSSxFQUFFLE1BQU07SUFDWixPQUFPLEVBQUUsU0FBUztJQUNsQixPQUFPLEVBQUUsU0FBUztJQUNsQixNQUFNLEVBQUUsT0FBTztJQUNmLFVBQVUsRUFBRSxtQkFBbUI7SUFDL0IsV0FBVyxFQUFFLGdCQUFnQjtJQUM3QixXQUFXLEVBQUUsY0FBYztJQUMzQixVQUFVLEVBQUUsYUFBYTtJQUN6QixTQUFTLEVBQUUsWUFBWTtJQUN2QixRQUFRLEVBQUUsV0FBVztJQUNyQixRQUFRLEVBQUUsV0FBVztJQUNyQixZQUFZLEVBQUUsZUFBZTtJQUM3QixXQUFXLEVBQUUsY0FBYztJQUMzQixVQUFVLEVBQUUsYUFBYTtJQUN6QixXQUFXLEVBQUUsY0FBYztJQUMzQixRQUFRLEVBQUUsV0FBVztJQUNyQixRQUFRLEVBQUUsV0FBVztJQUNyQixpQkFBaUIsRUFBRSw0QkFBNEI7SUFDL0MsZUFBZSxFQUFFLHNCQUFzQjtJQUN2QywwQkFBMEIsRUFBRSwyQkFBMkI7SUFDdkQsa0JBQWtCLEVBQUUsc0JBQXNCO0lBQzFDLGNBQWMsRUFBRSxpQkFBaUI7SUFDakMsYUFBYSxFQUFFLGdCQUFnQjtJQUMvQixPQUFPLEVBQUUsU0FBUztJQUNsQixXQUFXO0lBQ1gsZUFBZSxFQUFFLHNCQUFzQjtJQUN2QyxhQUFhLEVBQUUsb0JBQW9CO0lBQ25DLHdCQUF3QixFQUFFLHlCQUF5QjtJQUNuRCx5QkFBeUIsRUFBRSwwQkFBMEI7SUFDckQseUJBQXlCLEVBQUUseUJBQXlCO0lBQ3BELHVCQUF1QixFQUFFLHdCQUF3QjtJQUNqRCw2QkFBNkIsRUFBRSxlQUFlO0lBQzlDLHdCQUF3QixFQUFFLHNCQUFzQjtJQUNoRCwwQkFBMEIsRUFBRSw0Q0FBNEM7SUFDeEUsUUFBUTtJQUNSLHlCQUF5QixFQUFFLGFBQWE7SUFDeEMsY0FBYztJQUNkLHFCQUFxQixFQUFFLGFBQWE7SUFDcEMsZ0JBQWdCLEVBQUUsbUJBQW1CO0lBQ3JDLCtCQUErQixFQUFFLGFBQWE7SUFDOUMsK0JBQStCLEVBQUUsOEJBQThCO0lBQy9ELHVCQUF1QixFQUFFLGdCQUFnQjtJQUN6QyxzQkFBc0IsRUFBRSxlQUFlO0lBQ3ZDLG1CQUFtQixFQUFFLFlBQVk7SUFDakMsd0JBQXdCLEVBQUUsaUJBQWlCO0lBQzNDLG9CQUFvQixFQUFFLGFBQWE7SUFDbkMsdUJBQXVCLEVBQUUsZ0JBQWdCO0lBQ3pDLHlCQUF5QixFQUFFLHFEQUFxRDtJQUNoRix3QkFBd0IsRUFBRSxrREFBa0Q7SUFDNUUsdUJBQXVCLEVBQUUsd0JBQXdCO0lBQ2pELGFBQWE7SUFDYixnQkFBZ0IsRUFBRSxnQkFBZ0I7SUFDbEMsaUJBQWlCO0lBQ2pCLHVCQUF1QixFQUFFLGlCQUFpQjtJQUMxQyx3QkFBd0IsRUFBRSxpQkFBaUI7SUFDM0MseUJBQXlCLEVBQUUsMEJBQTBCO0lBQ3JELDBCQUEwQixFQUFFLDBCQUEwQjtJQUN0RCxjQUFjO0lBQ2Qsc0JBQXNCLEVBQUUsa0NBQWtDO0lBQzFELGlCQUFpQixFQUFFLDRCQUE0QjtJQUMvQyxpQkFBaUI7SUFDakIsc0JBQXNCLEVBQUUsYUFBYTtJQUNyQyxtQkFBbUIsRUFBRSxTQUFTO0lBQzlCLG1CQUFtQixFQUFFLFdBQVc7SUFDaEMsaUJBQWlCLEVBQUUsT0FBTztJQUMxQixzQkFBc0IsRUFBRSxhQUFhO0lBQ3JDLFdBQVc7SUFDWCxjQUFjLEVBQUUsd0JBQXdCO0lBQ3hDLGlCQUFpQixFQUFFLHFDQUFxQztJQUN4RCxpQkFBaUIsRUFBRSxXQUFXO0lBQzlCLGdCQUFnQixFQUFFLFVBQVU7SUFDNUIsaUJBQWlCLEVBQUUsWUFBWTtJQUMvQixZQUFZLEVBQUUsY0FBYztJQUM1QiwyQkFBMkI7SUFDM0IsNkJBQTZCLEVBQUUsY0FBYztJQUM3Qyx1QkFBdUIsRUFBRSxRQUFRO0lBQ2pDLDRCQUE0QixFQUFFLHdCQUF3QjtJQUN0RCxnQ0FBZ0MsRUFBRSxnS0FBZ0s7SUFDbE0sU0FBUztJQUNULGlCQUFpQixFQUFFLFdBQVc7SUFDOUIsZUFBZSxFQUFFLE9BQU87SUFFeEI7OztPQUdHO0lBQ0gsWUFBWSxFQUFFLGVBQWU7SUFDN0IsWUFBWSxFQUFFLGVBQWU7SUFFN0I7O09BRUc7SUFDSCxZQUFZLEVBQUUsZUFBZTtDQUM5QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIzIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzIH0gZnJvbSAnLi9jb21tb24tc3RyaW5ncy5pbnRlcmZhY2UnO1xuXG5leHBvcnQgY29uc3QgY29tbW9uU3RyaW5nc0RlZmF1bHQ6IENsckNvbW1vblN0cmluZ3MgPSB7XG4gIG9wZW46ICdPcGVuJyxcbiAgY2xvc2U6ICdDbG9zZScsXG4gIHNob3c6ICdTaG93JyxcbiAgaGlkZTogJ0hpZGUnLFxuICBleHBhbmQ6ICdFeHBhbmQnLFxuICBjb2xsYXBzZTogJ0NvbGxhcHNlJyxcbiAgbW9yZTogJ01vcmUnLFxuICBzZWxlY3Q6ICdTZWxlY3QnLFxuICBzZWxlY3RBbGw6ICdTZWxlY3QgQWxsJyxcbiAgcHJldmlvdXM6ICdQcmV2aW91cycsXG4gIG5leHQ6ICdOZXh0JyxcbiAgY3VycmVudDogJ0p1bXAgdG8gY3VycmVudCcsXG4gIGluZm86ICdJbmZvJyxcbiAgc3VjY2VzczogJ1N1Y2Nlc3MnLFxuICB3YXJuaW5nOiAnV2FybmluZycsXG4gIGRhbmdlcjogJ0Vycm9yJyxcbiAgcm93QWN0aW9uczogJ0F2YWlsYWJsZSBhY3Rpb25zJyxcbiAgcGlja0NvbHVtbnM6ICdNYW5hZ2UgQ29sdW1ucycsXG4gIHNob3dDb2x1bW5zOiAnU2hvdyBDb2x1bW5zJyxcbiAgc29ydENvbHVtbjogJ1NvcnQgQ29sdW1uJyxcbiAgZmlyc3RQYWdlOiAnRmlyc3QgUGFnZScsXG4gIGxhc3RQYWdlOiAnTGFzdCBQYWdlJyxcbiAgbmV4dFBhZ2U6ICdOZXh0IFBhZ2UnLFxuICBwcmV2aW91c1BhZ2U6ICdQcmV2aW91cyBQYWdlJyxcbiAgY3VycmVudFBhZ2U6ICdDdXJyZW50IFBhZ2UnLFxuICB0b3RhbFBhZ2VzOiAnVG90YWwgUGFnZXMnLFxuICBmaWx0ZXJJdGVtczogJ0ZpbHRlciBpdGVtcycsXG4gIG1pblZhbHVlOiAnTWluIHZhbHVlJyxcbiAgbWF4VmFsdWU6ICdNYXggdmFsdWUnLFxuICBtb2RhbENvbnRlbnRTdGFydDogJ0JlZ2lubmluZyBvZiBNb2RhbCBDb250ZW50JyxcbiAgbW9kYWxDb250ZW50RW5kOiAnRW5kIG9mIE1vZGFsIENvbnRlbnQnLFxuICBzaG93Q29sdW1uc01lbnVEZXNjcmlwdGlvbjogJ1Nob3cgb3IgaGlkZSBjb2x1bW5zIG1lbnUnLFxuICBhbGxDb2x1bW5zU2VsZWN0ZWQ6ICdBbGwgY29sdW1ucyBzZWxlY3RlZCcsXG4gIHNpZ25wb3N0VG9nZ2xlOiAnU2lnbnBvc3QgVG9nZ2xlJyxcbiAgc2lnbnBvc3RDbG9zZTogJ1NpZ25wb3N0IENsb3NlJyxcbiAgbG9hZGluZzogJ0xvYWRpbmcnLFxuICAvLyBEYXRhZ3JpZFxuICBkZXRhaWxQYW5lU3RhcnQ6ICdTdGFydCBvZiByb3cgZGV0YWlscycsXG4gIGRldGFpbFBhbmVFbmQ6ICdFbmQgb2Ygcm93IGRldGFpbHMnLFxuICBzaW5nbGVTZWxlY3Rpb25BcmlhTGFiZWw6ICdTaW5nbGUgc2VsZWN0aW9uIGhlYWRlcicsXG4gIHNpbmdsZUFjdGlvbmFibGVBcmlhTGFiZWw6ICdTaW5nbGUgYWN0aW9uYWJsZSBoZWFkZXInLFxuICBkZXRhaWxFeHBhbmRhYmxlQXJpYUxhYmVsOiAnVG9nZ2xlIG1vcmUgcm93IGNvbnRlbnQnLFxuICBkYXRhZ3JpZEZpbHRlckFyaWFMYWJlbDogJ1RvZ2dsZSB7Q09MVU1OfSBmaWx0ZXInLFxuICBkYXRhZ3JpZEZpbHRlckRpYWxvZ0FyaWFMYWJlbDogJ0ZpbHRlciBkaWFsb2cnLFxuICBjb2x1bW5TZXBhcmF0b3JBcmlhTGFiZWw6ICdDb2x1bW4gcmVzaXplIGhhbmRsZScsXG4gIGNvbHVtblNlcGFyYXRvckRlc2NyaXB0aW9uOiAnVXNlIGxlZnQgb3IgcmlnaHQga2V5IHRvIHJlc2l6ZSB0aGUgY29sdW1uJyxcbiAgLy8gQWxlcnRcbiAgYWxlcnRDbG9zZUJ1dHRvbkFyaWFMYWJlbDogJ0Nsb3NlIGFsZXJ0JyxcbiAgLy8gRGF0ZSBQaWNrZXJcbiAgZGF0ZXBpY2tlckRpYWxvZ0xhYmVsOiAnQ2hvb3NlIGRhdGUnLFxuICBkYXRlcGlja2VyVG9nZ2xlOiAnVG9nZ2xlIGRhdGVwaWNrZXInLFxuICBkYXRlcGlja2VyVG9nZ2xlQ2hvb3NlRGF0ZUxhYmVsOiAnQ2hvb3NlIGRhdGUnLFxuICBkYXRlcGlja2VyVG9nZ2xlQ2hhbmdlRGF0ZUxhYmVsOiAnQ2hhbmdlIGRhdGUsIHtTRUxFQ1RFRF9EQVRFfScsXG4gIGRhdGVwaWNrZXJQcmV2aW91c01vbnRoOiAnUHJldmlvdXMgbW9udGgnLFxuICBkYXRlcGlja2VyQ3VycmVudE1vbnRoOiAnQ3VycmVudCBtb250aCcsXG4gIGRhdGVwaWNrZXJOZXh0TW9udGg6ICdOZXh0IG1vbnRoJyxcbiAgZGF0ZXBpY2tlclByZXZpb3VzRGVjYWRlOiAnUHJldmlvdXMgZGVjYWRlJyxcbiAgZGF0ZXBpY2tlck5leHREZWNhZGU6ICdOZXh0IGRlY2FkZScsXG4gIGRhdGVwaWNrZXJDdXJyZW50RGVjYWRlOiAnQ3VycmVudCBkZWNhZGUnLFxuICBkYXRlcGlja2VyU2VsZWN0TW9udGhUZXh0OiAnU2VsZWN0IG1vbnRoLCB0aGUgY3VycmVudCBtb250aCBpcyB7Q0FMRU5EQVJfTU9OVEh9JyxcbiAgZGF0ZXBpY2tlclNlbGVjdFllYXJUZXh0OiAnU2VsZWN0IHllYXIsIHRoZSBjdXJyZW50IHllYXIgaXMge0NBTEVOREFSX1lFQVJ9JyxcbiAgZGF0ZXBpY2tlclNlbGVjdGVkTGFiZWw6ICd7RlVMTF9EQVRFfSAtIFNlbGVjdGVkJyxcbiAgLy8gU3RhY2sgVmlld1xuICBzdGFja1ZpZXdDaGFuZ2VkOiAnVmFsdWUgY2hhbmdlZC4nLFxuICAvLyBSZXNwb25zaXZlIE5hdlxuICByZXNwb25zaXZlTmF2VG9nZ2xlT3BlbjogJ05hdmlnYXRpb24gbWVudScsXG4gIHJlc3BvbnNpdmVOYXZUb2dnbGVDbG9zZTogJ05hdmlnYXRpb24gbWVudScsXG4gIHJlc3BvbnNpdmVOYXZPdmVyZmxvd09wZW46ICdOYXZpZ2F0aW9uIG92ZXJmbG93IG1lbnUnLFxuICByZXNwb25zaXZlTmF2T3ZlcmZsb3dDbG9zZTogJ05hdmlnYXRpb24gb3ZlcmZsb3cgbWVudScsXG4gIC8vVmVydGljYWwgTmF2XG4gIHZlcnRpY2FsTmF2R3JvdXBUb2dnbGU6ICdUb2dnbGUgdmVydGljYWwgbmF2aWdhdGlvbiBncm91cCcsXG4gIHZlcnRpY2FsTmF2VG9nZ2xlOiAnVG9nZ2xlIHZlcnRpY2FsIG5hdmlnYXRpb24nLFxuICAvLyBUaW1lbGluZSBzdGVwc1xuICB0aW1lbGluZVN0ZXBOb3RTdGFydGVkOiAnTm90IHN0YXJ0ZWQnLFxuICB0aW1lbGluZVN0ZXBDdXJyZW50OiAnQ3VycmVudCcsXG4gIHRpbWVsaW5lU3RlcFN1Y2Nlc3M6ICdDb21wbGV0ZWQnLFxuICB0aW1lbGluZVN0ZXBFcnJvcjogJ0Vycm9yJyxcbiAgdGltZWxpbmVTdGVwUHJvY2Vzc2luZzogJ0luIHByb2dyZXNzJyxcbiAgLy8gQ29tYm9ib3hcbiAgY29tYm9ib3hEZWxldGU6ICdEZWxldGUgc2VsZWN0ZWQgb3B0aW9uJyxcbiAgY29tYm9ib3hTZWFyY2hpbmc6ICdTZWFyY2hpbmcgZm9yIG1hdGNoZXMgZm9yIFwie0lOUFVUfVwiJyxcbiAgY29tYm9ib3hTZWxlY3Rpb246ICdTZWxlY3Rpb24nLFxuICBjb21ib2JveFNlbGVjdGVkOiAnU2VsZWN0ZWQnLFxuICBjb21ib2JveE5vUmVzdWx0czogJ05vIHJlc3VsdHMnLFxuICBjb21ib2JveE9wZW46ICdTaG93IG9wdGlvbnMnLFxuICAvLyBEYXRhZ3JpZCBleHBhbmRhYmxlIHJvd3NcbiAgZGF0YWdyaWRFeHBhbmRhYmxlQmVnaW5uaW5nT2Y6ICdCZWdpbm5pbmcgb2YnLFxuICBkYXRhZ3JpZEV4cGFuZGFibGVFbmRPZjogJ0VuZCBvZicsXG4gIGRhdGFncmlkRXhwYW5kYWJsZVJvd0NvbnRlbnQ6ICdFeHBhbmRhYmxlIHJvdyBjb250ZW50JyxcbiAgZGF0YWdyaWRFeHBhbmRhYmxlUm93c0hlbHBlclRleHQ6IGBTY3JlZW4gcmVhZGVyIHRhYmxlIGNvbW1hbmRzIG1heSBub3Qgd29yayBmb3Igdmlld2luZyBleHBhbmRlZCBjb250ZW50LCBwbGVhc2UgdXNlIHlvdXIgc2NyZWVuIHJlYWRlcidzIGJyb3dzZSBtb2RlIHRvIHJlYWQgdGhlIGNvbnRlbnQgZXhwb3NlZCBieSB0aGlzIGJ1dHRvbmAsXG4gIC8vIFdpemFyZFxuICB3aXphcmRTdGVwU3VjY2VzczogJ0NvbXBsZXRlZCcsXG4gIHdpemFyZFN0ZXBFcnJvcjogJ0Vycm9yJyxcblxuICAvKipcbiAgICogUGFzc3dvcmQgSW5wdXRcbiAgICogU2NyZWVuLXJlYWRlciB0ZXh0IGZvciB0aGUgaGlkZS9zaG93IHBhc3N3b3JkIGZpZWxkIGJ1dHRvblxuICAgKi9cbiAgcGFzc3dvcmRIaWRlOiAnSGlkZSBwYXNzd29yZCcsXG4gIHBhc3N3b3JkU2hvdzogJ1Nob3cgcGFzc3dvcmQnLFxuXG4gIC8qKlxuICAgKiBEYXRhZ3JpZCBmb290ZXI7IHNyLW9ubHkgdGV4dCBhZnRlciB0aGUgbnVtYmVyIG9mIHNlbGVjdGVkIHJvd3MuXG4gICAqL1xuICBzZWxlY3RlZFJvd3M6ICdTZWxlY3RlZCByb3dzJyxcbn07XG4iXX0=